class Solution {
public:
bool isPossible(int mid, int days, vector<int> &weights)
{
    int cnt = 1;
    int prevSum = 0;
    int i;
    for (i = 0; i < weights.size(); i++)
    {
        if (weights[i] > mid)
            return false;
        else if (prevSum + weights[i] > mid)
        {
            cnt++;
            prevSum = weights[i];
        }
        else
            prevSum += weights[i];
    }
    if (cnt <= days)
        return true;
    return false;
}
int shipWithinDays(vector<int> &weights, int days)
{
    int sum = std::accumulate(weights.begin(), weights.end(), 0);
    int left = 0;
    int right = sum;
    int ans = 0;
    while (left <= right)
    {
        int mid = left + (right - left) / 2;
        if (isPossible(mid, days, weights))
        {
            ans = mid;
            right = mid - 1;
        }
        else
        {
            left = mid + 1;
        }
    }
    return ans;
}
};
